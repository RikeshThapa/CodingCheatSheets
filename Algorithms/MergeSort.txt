#Pseudo code for Mergesort
# C= output attay [length= n]
# A = 1st sorted array [n/2]
# B = 2nd sorted array [n/2]
# i = 1
# j = 1
#end cases to implement: keep tracck of when you fall off A or B

 
'''For k=1 to n
	if A(i) < B(j):
		C(k) = A(i)
		i++
	else [B(j)<A(i)]:
		C(k) = B(j)
		j++
   end
'''

'''
Run time analysis: recursion tree results in max depth of log2(n+1) where n is power of 2
At each recursion tree j = 0, 1, 2, 3... log2(n) there are 2^j sub problems of size n/(2^j) since each number of comparisons being done at each level doubles and size of arrys half
'''